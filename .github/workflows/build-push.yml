name: Build and Push Astra Agent Images

on:
  push:
    branches:
      - master
      - feature/**
      - 'release/**'
  pull_request:
    branches: [master]
  workflow_dispatch:
    inputs:
      push_images:
        description: 'Push images to registry'
        required: false
        default: true
        type: boolean

concurrency:
  group: build-push-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write
  attestations: write
  id-token: write

env:
  REGISTRY_GHCR: ghcr.io

jobs:
  # ============================================================================
  # Stage 1: Project Detection and Metadata
  # ============================================================================
  detect-and-prepare:
    name: üîç Detection & Metadata
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.meta.outputs.version }}
      should-push: ${{ steps.meta.outputs.should-push }}
      platforms: ${{ steps.meta.outputs.platforms }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract metadata
        id: meta
        run: |
          # Determine version (only for branches now)
          if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            VERSION="latest"
          else
            VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed 's/[^a-zA-Z0-9._-]/-/g')
          fi

          # Determine if should push (master, feature branches, or manual dispatch)
          SHOULD_PUSH="false"
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/master" ]]; then
            SHOULD_PUSH="true"
          elif [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == refs/heads/feature/* ]]; then
            SHOULD_PUSH="true"
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.push_images }}" == "true" ]]; then
            SHOULD_PUSH="true"
          fi

          # Set platforms (single arch for development builds)
          PLATFORMS="linux/amd64"

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "should-push=$SHOULD_PUSH" >> $GITHUB_OUTPUT
          echo "platforms=$PLATFORMS" >> $GITHUB_OUTPUT

          echo "üè∑Ô∏è Version: $VERSION"
          echo "üì§ Should push: $SHOULD_PUSH"
          echo "üèóÔ∏è Platforms: $PLATFORMS"

  # ============================================================================
  # Stage 2: Build Astra Agent Docker Images (Parallel Jobs)
  # ============================================================================
  build-core-tenant:
    name: üè¢ Build Core Tenant
    runs-on: ubuntu-latest
    needs: detect-and-prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: needs.detect-and-prepare.outputs.should-push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/${{ github.repository }}/astra-agent-core-tenant
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.detect-and-prepare.outputs.version }}

      - name: Build and push Core Tenant image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./core/tenant/Dockerfile
          platforms: ${{ needs.detect-and-prepare.outputs.platforms }}
          push: ${{ needs.detect-and-prepare.outputs.should-push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.detect-and-prepare.outputs.version }}
            GIT_COMMIT=${{ github.sha }}
            BUILD_TIME=${{ github.run_id }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-core-memory:
    name: üß† Build Core Memory
    runs-on: ubuntu-latest
    needs: detect-and-prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: needs.detect-and-prepare.outputs.should-push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/${{ github.repository }}/astra-agent-core-memory
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.detect-and-prepare.outputs.version }}

      - name: Build and push Core Memory image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./core/memory/database/Dockerfile
          platforms: ${{ needs.detect-and-prepare.outputs.platforms }}
          push: ${{ needs.detect-and-prepare.outputs.should-push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.detect-and-prepare.outputs.version }}
            GIT_COMMIT=${{ github.sha }}
            BUILD_TIME=${{ github.run_id }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-core-rpa:
    name: ü§ñ Build Core RPA
    runs-on: ubuntu-latest
    needs: detect-and-prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: needs.detect-and-prepare.outputs.should-push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/${{ github.repository }}/astra-agent-core-rpa
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.detect-and-prepare.outputs.version }}

      - name: Build and push Core RPA image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./core/plugin/rpa/Dockerfile
          platforms: ${{ needs.detect-and-prepare.outputs.platforms }}
          push: ${{ needs.detect-and-prepare.outputs.should-push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.detect-and-prepare.outputs.version }}
            GIT_COMMIT=${{ github.sha }}
            BUILD_TIME=${{ github.run_id }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-core-link:
    name: üîó Build Core Link
    runs-on: ubuntu-latest
    needs: detect-and-prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: needs.detect-and-prepare.outputs.should-push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/${{ github.repository }}/astra-agent-core-link
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.detect-and-prepare.outputs.version }}

      - name: Build and push Core Link image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./core/plugin/link/Dockerfile
          platforms: ${{ needs.detect-and-prepare.outputs.platforms }}
          push: ${{ needs.detect-and-prepare.outputs.should-push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.detect-and-prepare.outputs.version }}
            GIT_COMMIT=${{ github.sha }}
            BUILD_TIME=${{ github.run_id }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-core-aitools:
    name: üõ†Ô∏è Build Core AI Tools
    runs-on: ubuntu-latest
    needs: detect-and-prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: needs.detect-and-prepare.outputs.should-push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/${{ github.repository }}/astra-agent-core-aitools
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.detect-and-prepare.outputs.version }}

      - name: Build and push Core AI Tools image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./core/plugin/aitools/Dockerfile
          platforms: ${{ needs.detect-and-prepare.outputs.platforms }}
          push: ${{ needs.detect-and-prepare.outputs.should-push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.detect-and-prepare.outputs.version }}
            GIT_COMMIT=${{ github.sha }}
            BUILD_TIME=${{ github.run_id }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-core-agent:
    name: ü§ñ Build Core Agent
    runs-on: ubuntu-latest
    needs: detect-and-prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: needs.detect-and-prepare.outputs.should-push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/${{ github.repository }}/astra-agent-core-agent
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.detect-and-prepare.outputs.version }}

      - name: Build and push Core Agent image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./core/agent/Dockerfile
          platforms: ${{ needs.detect-and-prepare.outputs.platforms }}
          push: ${{ needs.detect-and-prepare.outputs.should-push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.detect-and-prepare.outputs.version }}
            GIT_COMMIT=${{ github.sha }}
            BUILD_TIME=${{ github.run_id }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-core-knowledge:
    name: üìö Build Core Knowledge
    runs-on: ubuntu-latest
    needs: detect-and-prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: needs.detect-and-prepare.outputs.should-push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/${{ github.repository }}/astra-agent-core-knowledge
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.detect-and-prepare.outputs.version }}

      - name: Build and push Core Knowledge image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./core/knowledge/Dockerfile
          platforms: ${{ needs.detect-and-prepare.outputs.platforms }}
          push: ${{ needs.detect-and-prepare.outputs.should-push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.detect-and-prepare.outputs.version }}
            GIT_COMMIT=${{ github.sha }}
            BUILD_TIME=${{ github.run_id }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-core-workflow:
    name: ‚ö° Build Core Workflow
    runs-on: ubuntu-latest
    needs: detect-and-prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: needs.detect-and-prepare.outputs.should-push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/${{ github.repository }}/astra-agent-core-workflow
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.detect-and-prepare.outputs.version }}

      - name: Build and push Core Workflow image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./core/workflow/Dockerfile
          platforms: ${{ needs.detect-and-prepare.outputs.platforms }}
          push: ${{ needs.detect-and-prepare.outputs.should-push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.detect-and-prepare.outputs.version }}
            GIT_COMMIT=${{ github.sha }}
            BUILD_TIME=${{ github.run_id }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-console-frontend:
    name: üåê Build Console Frontend
    runs-on: ubuntu-latest
    needs: detect-and-prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: needs.detect-and-prepare.outputs.should-push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/${{ github.repository }}/astra-agent-console-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.detect-and-prepare.outputs.version }}

      - name: Build and push Console Frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./console/frontend/Dockerfile
          platforms: ${{ needs.detect-and-prepare.outputs.platforms }}
          push: ${{ needs.detect-and-prepare.outputs.should-push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.detect-and-prepare.outputs.version }}
            GIT_COMMIT=${{ github.sha }}
            BUILD_TIME=${{ github.run_id }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-console-hub:
    name: üéØ Build Console Hub
    runs-on: ubuntu-latest
    needs: detect-and-prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: needs.detect-and-prepare.outputs.should-push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/${{ github.repository }}/astra-agent-console-hub
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.detect-and-prepare.outputs.version }}

      - name: Build and push Console Hub image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./console/backend/hub/Dockerfile
          platforms: ${{ needs.detect-and-prepare.outputs.platforms }}
          push: ${{ needs.detect-and-prepare.outputs.should-push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.detect-and-prepare.outputs.version }}
            GIT_COMMIT=${{ github.sha }}
            BUILD_TIME=${{ github.run_id }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-console-toolkit:
    name: üß∞ Build Console Toolkit
    runs-on: ubuntu-latest
    needs: detect-and-prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        if: needs.detect-and-prepare.outputs.should-push == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY_GHCR }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY_GHCR }}/${{ github.repository }}/astra-agent-console-toolkit
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=${{ needs.detect-and-prepare.outputs.version }}

      - name: Build and push Console Toolkit image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./console/backend/toolkit/Dockerfile
          platforms: ${{ needs.detect-and-prepare.outputs.platforms }}
          push: ${{ needs.detect-and-prepare.outputs.should-push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ needs.detect-and-prepare.outputs.version }}
            GIT_COMMIT=${{ github.sha }}
            BUILD_TIME=${{ github.run_id }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ============================================================================
  # Stage 3: Summary and Notifications
  # ============================================================================
  build-summary:
    name: üìä Build Summary
    runs-on: ubuntu-latest
    needs:
      - detect-and-prepare
      - build-core-tenant
      - build-core-memory
      - build-core-rpa
      - build-core-link
      - build-core-aitools
      - build-core-agent
      - build-core-knowledge
      - build-core-workflow
      - build-console-frontend
      - build-console-hub
      - build-console-toolkit
    if: always()
    steps:
      - name: Generate build summary
        run: |
          echo "=== üê≥ Astra Agent Multi-Service Docker Build Summary ==="
          echo ""
          echo "üîç Project Detection: ${{ needs.detect-and-prepare.result }}"
          echo "üìä Version: ${{ needs.detect-and-prepare.outputs.version }}"
          echo "üì§ Push to Registry: ${{ needs.detect-and-prepare.outputs.should-push }}"
          echo "üèóÔ∏è Target Platforms: ${{ needs.detect-and-prepare.outputs.platforms }}"
          echo ""

          echo "üê≥ Docker Build Results:"
          echo "  üè¢ Core Tenant: ${{ needs.build-core-tenant.result }}"
          echo "  üß† Core Memory: ${{ needs.build-core-memory.result }}"
          echo "  ü§ñ Core RPA: ${{ needs.build-core-rpa.result }}"
          echo "  üîó Core Link: ${{ needs.build-core-link.result }}"
          echo "  üõ†Ô∏è Core AI Tools: ${{ needs.build-core-aitools.result }}"
          echo "  ü§ñ Core Agent: ${{ needs.build-core-agent.result }}"
          echo "  üìö Core Knowledge: ${{ needs.build-core-knowledge.result }}"
          echo "  ‚ö° Core Workflow: ${{ needs.build-core-workflow.result }}"
          echo "  üåê Console Frontend: ${{ needs.build-console-frontend.result }}"
          echo "  üéØ Console Hub: ${{ needs.build-console-hub.result }}"
          echo "  üß∞ Console Toolkit: ${{ needs.build-console-toolkit.result }}"
          echo ""

          # Count successful builds
          SUCCESS_COUNT=0
          TOTAL_COUNT=11

          [[ "${{ needs.build-core-tenant.result }}" == "success" ]] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          [[ "${{ needs.build-core-memory.result }}" == "success" ]] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          [[ "${{ needs.build-core-rpa.result }}" == "success" ]] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          [[ "${{ needs.build-core-link.result }}" == "success" ]] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          [[ "${{ needs.build-core-aitools.result }}" == "success" ]] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          [[ "${{ needs.build-core-agent.result }}" == "success" ]] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          [[ "${{ needs.build-core-knowledge.result }}" == "success" ]] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          [[ "${{ needs.build-core-workflow.result }}" == "success" ]] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          [[ "${{ needs.build-console-frontend.result }}" == "success" ]] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          [[ "${{ needs.build-console-hub.result }}" == "success" ]] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
          [[ "${{ needs.build-console-toolkit.result }}" == "success" ]] && SUCCESS_COUNT=$((SUCCESS_COUNT + 1))

          echo "üìä Build Success Rate: $SUCCESS_COUNT/$TOTAL_COUNT images built successfully"

          if [[ "${{ needs.detect-and-prepare.outputs.should-push }}" == "true" ]]; then
            echo ""
            echo "üéØ Published Images:"
            [[ "${{ needs.build-core-tenant.result }}" == "success" ]] && echo "  üè¢ ${{ env.REGISTRY_GHCR }}/${{ github.repository }}/openstellar-core-tenant:${{ needs.detect-and-prepare.outputs.version }}"
            [[ "${{ needs.build-core-memory.result }}" == "success" ]] && echo "  üß† ${{ env.REGISTRY_GHCR }}/${{ github.repository }}/astra-agent-core-memory:${{ needs.detect-and-prepare.outputs.version }}"
            [[ "${{ needs.build-core-rpa.result }}" == "success" ]] && echo "  ü§ñ ${{ env.REGISTRY_GHCR }}/${{ github.repository }}/astra-agent-core-rpa:${{ needs.detect-and-prepare.outputs.version }}"
            [[ "${{ needs.build-core-link.result }}" == "success" ]] && echo "  üîó ${{ env.REGISTRY_GHCR }}/${{ github.repository }}/astra-agent-core-link:${{ needs.detect-and-prepare.outputs.version }}"
            [[ "${{ needs.build-core-aitools.result }}" == "success" ]] && echo "  üõ†Ô∏è ${{ env.REGISTRY_GHCR }}/${{ github.repository }}/astra-agent-core-aitools:${{ needs.detect-and-prepare.outputs.version }}"
            [[ "${{ needs.build-core-agent.result }}" == "success" ]] && echo "  ü§ñ ${{ env.REGISTRY_GHCR }}/${{ github.repository }}/astra-agent-core-agent:${{ needs.detect-and-prepare.outputs.version }}"
            [[ "${{ needs.build-core-knowledge.result }}" == "success" ]] && echo "  üìö ${{ env.REGISTRY_GHCR }}/${{ github.repository }}/astra-agent-core-knowledge:${{ needs.detect-and-prepare.outputs.version }}"
            [[ "${{ needs.build-core-workflow.result }}" == "success" ]] && echo "  ‚ö° ${{ env.REGISTRY_GHCR }}/${{ github.repository }}/astra-agent-core-workflow:${{ needs.detect-and-prepare.outputs.version }}"
            [[ "${{ needs.build-console-frontend.result }}" == "success" ]] && echo "  üåê ${{ env.REGISTRY_GHCR }}/${{ github.repository }}/astra-agent-console-frontend:${{ needs.detect-and-prepare.outputs.version }}"
            [[ "${{ needs.build-console-hub.result }}" == "success" ]] && echo "  üéØ ${{ env.REGISTRY_GHCR }}/${{ github.repository }}/astra-agent-console-hub:${{ needs.detect-and-prepare.outputs.version }}"
            [[ "${{ needs.build-console-toolkit.result }}" == "success" ]] && echo "  üß∞ ${{ env.REGISTRY_GHCR }}/${{ github.repository }}/astra-agent-console-toolkit:${{ needs.detect-and-prepare.outputs.version }}"
          fi

          if [[ "$SUCCESS_COUNT" == "$TOTAL_COUNT" ]]; then
            echo ""
            echo "‚úÖ üéâ All Astra Agent Docker images built successfully!"
            if [[ "${{ needs.detect-and-prepare.outputs.should-push }}" == "true" ]]; then
              echo "üöÄ Images are now available in GitHub Container Registry"
            else
              echo "üì¶ Images built locally (not pushed to registry)"
            fi
          else
            echo ""
            echo "‚ùå üö® Some Docker builds failed - check individual job results"
            exit 1
          fi

          # Additional info for manual workflow dispatch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo ""
            echo "üîß Manual Workflow Dispatch Summary:"
            echo "  Trigger: ${{ github.actor }}"
            echo "  Ref: ${{ github.ref }}"
            echo "  Push Images: ${{ github.event.inputs.push_images }}"
          fi